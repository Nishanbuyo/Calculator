{"version":3,"sources":["App.js","components/Keypad.js","components/Result.js","serviceWorker.js","index.js"],"names":["App","props","calculate","setState","result","eval","state","clear","delete","slice","buttonClick","buttonName","className","this","Component","Keypad","e","target","name","onClick","Result","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8zCAKaA,IAAb,sXACE,aAAYC,OAAQ,IAAD,4LACjB,uBAAMA,OADW,MAQnBC,UAAY,WACV,MAAKC,SAAS,CACZC,OAAQC,KAAK,MAAKC,MAAMF,WAVT,MAcnBG,MAAQ,WACN,MAAKJ,SAAS,CACZC,OAAQ,MAhBO,MAoBnBI,OAAS,WACP,MAAKL,SAAS,CACZC,OAAQ,MAAKE,MAAMF,OAAOK,MAAM,GAAI,MAtBrB,MA0BnBC,YAAc,SAAAC,GACO,MAAfA,EACF,MAAKT,YAEiB,OAAfS,EACP,MAAKJ,QAEiB,QAAfI,EACP,MAAKH,SAGL,MAAKL,SAAS,CAAEC,OAAQ,MAAKE,MAAMF,OAASO,KAlC9C,MAAKL,MAAQ,CACXF,OAAQ,IAJO,MADrB,6MA2CI,OACE,kEAAKQ,UAAU,OACb,kEAAKA,UAAU,WACb,0FACA,kEAAKA,UAAY,QACf,2DAAC,kDAAD,CAAQR,OAAQS,KAAKP,MAAMF,SAC3B,2DAAC,kDAAD,CAAQM,YAAaG,KAAKH,qBAjDtC,KAAyBI,8CAyDVd,2B,6EC5DTe,E,4MACFL,YAAc,SAAAM,GACV,EAAKf,MAAMS,YAAYM,EAAEC,OAAOC,O,uDAIhC,OACI,yBAAKN,UAAU,WAEX,yBAAKA,UAAU,OACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,MAAMC,QAASN,KAAKH,aAAjC,OACA,4BAAQQ,KAAK,KAAKC,QAASN,KAAKH,aAAhC,OAEJ,yBAAKE,UAAU,OACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,MAEJ,yBAAKE,UAAU,OACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,MAGJ,yBAAKE,UAAU,OACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,MAGJ,yBAAKE,UAAU,OACX,4BAAQM,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,KACA,4BAAQQ,KAAK,IAAIC,QAASN,KAAKH,aAA/B,W,GAvCCI,aAgDNC,O,6EC/CTK,G,4KAEF,OACE,yBAAKR,UAAU,UACb,2BAAIC,KAAKZ,MAAMG,a,GAJFU,cAUNM,O,8ICDKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5B,EAAA,EAAD,OAEF6B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.37e6ecb7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Keypad from './components/Keypad'\nimport Result from './components/Result'\nimport './App.css'\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      result: \"\"\n    }\n  }\n\n  calculate = () => {\n    this.setState({\n      result: eval(this.state.result)\n    })\n  }\n\n  clear = () => {\n    this.setState({\n      result: \"\"\n    })\n  }\n\n  delete = () => {\n    this.setState({\n      result: this.state.result.slice(0, -1)\n    })\n  }\n\n  buttonClick = buttonName => {\n    if (buttonName === \"=\") {\n      this.calculate()\n    }\n    else if (buttonName === \"AC\") {\n      this.clear()\n    }\n    else if (buttonName === \"DEL\") {\n      this.delete()\n    }\n    else {\n      this.setState({ result: this.state.result + buttonName })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"wrapper\">\n          <h1>Simple Calculator</h1>\n          <div className = \"calc\">\n            <Result result={this.state.result} />\n            <Keypad buttonClick={this.buttonClick} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React, { Component } from 'react'\n\nclass Keypad extends Component {\n    buttonClick = e => {\n        this.props.buttonClick(e.target.name)\n    }\n    render() {\n\n        return (\n            <div className=\"buttons\">\n\n                <div className=\"row\">\n                    <button name=\"(\" onClick={this.buttonClick}>(</button>\n                    <button name=\")\" onClick={this.buttonClick}>)</button>\n                    <button name=\"DEL\" onClick={this.buttonClick}>DEL</button>\n                    <button name=\"AC\" onClick={this.buttonClick}>AC</button>\n                </div>\n                <div className=\"row\">\n                    <button name=\"7\" onClick={this.buttonClick}>7</button>\n                    <button name=\"8\" onClick={this.buttonClick}>8</button>\n                    <button name=\"9\" onClick={this.buttonClick}>9</button>\n                    <button name=\"/\" onClick={this.buttonClick}>/</button>\n                </div>\n                <div className=\"row\">\n                    <button name=\"4\" onClick={this.buttonClick}>4</button>\n                    <button name=\"5\" onClick={this.buttonClick}>5</button>\n                    <button name=\"6\" onClick={this.buttonClick}>6</button>\n                    <button name=\"*\" onClick={this.buttonClick}>X</button>\n                </div>\n\n                <div className=\"row\">\n                    <button name=\"1\" onClick={this.buttonClick}>1</button>\n                    <button name=\"2\" onClick={this.buttonClick}>2</button>\n                    <button name=\"3\" onClick={this.buttonClick}>3</button>\n                    <button name=\"-\" onClick={this.buttonClick}>-</button>\n                </div>\n\n                <div className=\"row\">\n                    <button name=\".\" onClick={this.buttonClick}>.</button>\n                    <button name=\"0\" onClick={this.buttonClick}>0</button>\n                    <button name=\"+\" onClick={this.buttonClick}>+</button>\n                    <button name=\"=\" onClick={this.buttonClick}>=</button>\n                </div>\n\n            </div>\n\n        )\n    }\n}\n\nexport default Keypad\n","import React, { Component } from 'react'\nimport '../App.css'\n\nclass Result extends Component {\n  render() {\n    return (\n      <div className=\"result\">\n        <p>{this.props.result}</p>\n      </div>\n    )\n  }\n}\n\nexport default Result\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}